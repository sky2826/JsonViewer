{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","ObjectViewr.js","Editor.js","JsonViewer.js","index.js"],"names":["App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ObjectViewr","marginLeft","data","heading","useState","display","setDisplay","handleButton","style","onClick","src","Object","entries","map","val","color","type","String","console","log","Editor","value","handleJsonChange","padding","margin","mode","theme","height","width","onChange","name","editorProps","$blockScrolling","Json","error","JsonViewer","json","setJson","JSON","stringify","jsonString","setJsonString","backgroundColor","textAlign","id","overflowY","newJson","str","parse","e","IsValidJSONString","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4LAAe,I,YCwBAA,ICZAC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCkCCQ,EAvCK,SAAdA,EAAe,GAA+B,IAA9BC,EAA6B,EAA7BA,WAAWC,EAAkB,EAAlBA,KAAKC,EAAa,EAAbA,QAClC,EAA6BC,mBAAS,UAAtC,mBAAOC,EAAP,KAAeC,EAAf,KACMC,EAAe,WAEjBD,EADY,UAATD,EACQ,WAEA,WAYf,OACI,qCACA,sBAAKG,MAAO,CAACP,WAAWA,GAAxB,UAA+C,UAATI,EACpC,qBAAKI,QAASF,EAAcG,IAAI,+EAChC,qBAAKD,QAASF,EAAcG,IAAI,kGAAmG,4BAAI,KAAKP,OACjI,WAAZE,EACCM,OAAOC,QAAQV,GAAMW,KAAI,SAACC,GACxB,OAAGA,EAAI,IAAuB,iBAAVA,EAAI,GAEb,cAACd,EAAD,CAAaC,WAAYA,EAAW,GAAIC,KAAMY,EAAI,GAAIX,QAASW,EAAI,KAInE,sBAAKN,MAAO,CAACP,WAAWA,EAAW,IAAnC,UAAyCa,EAAI,GAAK,MAAM,uBAAMN,MAAO,CAACO,OAvBrEC,SAuB6FF,EAAI,GAtBtG,UAARE,EACI,QACS,UAARA,EACD,OACS,WAARA,EACD,OAEA,QAegE,UAAiDC,OAAOH,EAAI,IAAKI,QAAQC,IAAIL,EAAI,UAvBzI,IAACE,KA0Bd,iC,yBCLKI,G,YApBA,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,MAAMC,EAAsB,EAAtBA,iBAEnB,OACQ,cAAC,IAAD,CACQC,QAAQ,MACRC,OAAO,MACPC,KAAK,OACLC,MAAM,SACNC,OAAO,OACPC,MAAM,OACNC,SAAUP,EACVD,MAAOA,EACPS,KAAK,mBACLC,YAAa,CACTC,iBAAiB,OCtBnCC,EAAO,CAAC,QAAW,mBACnBC,EAAQ,CAAC,QAAY,oBAsCZC,EAlCI,WACf,MAAsB/B,mBAAS6B,GAA/B,mBAAMG,EAAN,KAAWC,EAAX,KACA,EAAkCjC,mBAASkC,KAAKC,UAAUN,IAA1D,mBAAMO,EAAN,KAAiBC,EAAjB,KAmBA,OACI,qCACA,wBAAQjC,MAAO,CAACoB,MAAM,QAAQc,gBAAgB,QAAQ3B,MAAM,QAAQ4B,UAAU,UAA9E,yBACA,sBAAKC,GAAG,aAAR,UACA,qBAAKpC,MAAO,CAACoB,MAAM,OAAOD,OAAO,OAAOkB,UAAU,QAAlD,SACI,cAAC,EAAD,CAAc5C,WAAY,EAAGC,KAAMkC,EAAMjC,QAAS,WAEtD,qBAAKK,MAAO,CAACoB,MAAM,OAAOL,QAAQ,OAAlC,SAA0C,cAAC,EAAD,CAAQF,MAAOmB,EAAYlB,iBAhBhD,SAACwB,IARA,SAACC,GAC3B,IACIT,KAAKU,MAAMD,GACb,MAAOE,GACL,OAAO,EAEX,OAAO,EAGAC,CAAkBJ,IAIjBT,EAAQH,GACRO,EAAcK,KAJjBT,EAAQC,KAAKU,MAAMF,IAAWL,EAAcK,gBCfrDK,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BhE,M","file":"static/js/main.da066b61.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React,{useState} from 'react'\r\n\r\nconst ObjectViewr = ({marginLeft,data,heading}) => {\r\n    const [display,setDisplay] = useState(\"expand\");\r\n    const handleButton = ()=>{\r\n        if(display==\"expand\")\r\n        setDisplay(\"collapse\");\r\n        else\r\n        setDisplay(\"expand\");\r\n    }\r\n    const fieldColor = (type)=>{\r\n        if(type == \"string\")\r\n        return \"green\";\r\n        else if(type == \"number\")\r\n        return \"blue\";\r\n        else if(type == \"boolean\")\r\n        return \"grey\";\r\n        else\r\n        return \"red\"\r\n    }\r\n    return (\r\n        <>\r\n        <div style={{marginLeft:marginLeft}}>{display==\"expand\"\r\n        ? <img onClick={handleButton} src=\"https://png.pngitem.com/pimgs/s/19-191766_button-minus-hd-png-download.png\" />\r\n        : <img onClick={handleButton} src=\"https://png.pngitem.com/pimgs/s/19-191807_plus-add-addition-button-sign-symbol-icon-round.png\" />}<b>{'{}'+heading}</b></div>\r\n        {display === \"expand\"\r\n        ? Object.entries(data).map((val)=>{\r\n            if(val[1] && typeof val[1] == \"object\")\r\n            {\r\n                return <ObjectViewr marginLeft={marginLeft+10} data={val[1]} heading={val[0]}></ObjectViewr>\r\n            }\r\n            else\r\n            {\r\n                return <div style={{marginLeft:marginLeft+10}}>{val[0] + \" : \"}<span style={{color:fieldColor(typeof val[1])}}>{String(val[1])}{console.log(val[1])}</span></div>\r\n            }\r\n        })\r\n        : <></>}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ObjectViewr\r\n","import React from 'react'\r\n// Import Brace and the AceEditor Component\r\nimport brace from 'brace';\r\nimport AceEditor from 'react-ace';\r\n\r\n// Import a Mode (language)\r\nimport 'brace/mode/java';\r\n\r\n// Import a Theme (okadia, github, xcode etc)\r\nimport 'brace/theme/github';\r\n\r\nconst Editor = ({value,handleJsonChange}) => {\r\n    \r\n    return (\r\n            <AceEditor\r\n                    padding=\"0px\"\r\n                    margin=\"0px\"\r\n                    mode=\"java\"\r\n                    theme=\"github\"\r\n                    height=\"95vh\"\r\n                    width=\"100%\"\r\n                    onChange={handleJsonChange}\r\n                    value={value}\r\n                    name=\"UNIQUE_ID_OF_DIV\"\r\n                    editorProps={{\r\n                        $blockScrolling: true\r\n                    }}\r\n                />\r\n    )\r\n}\r\n\r\nexport default Editor\r\n","import React,{useState,useEffect} from 'react'\r\nimport ObjectViewer from './ObjectViewr'\r\nimport Editor from './Editor'\r\nconst Json = {\"message\": \"Enter Json Here\"}\r\nconst error = {\"message\" : \"Enter Valid Json\"};\r\nconst Item = (key,value) => {\r\n    return <div>{key}</div>\r\n}\r\nconst JsonViewer = () => {\r\n    const[json,setJson] = useState(Json) \r\n    const[jsonString,setJsonString] = useState(JSON.stringify(Json))\r\n\r\n    const IsValidJSONString = (str)=>{\r\n    try {\r\n        JSON.parse(str);\r\n    } catch (e) {\r\n        return false;\r\n    }\r\n    return true;\r\n    }\r\n    const handleJsonChange = (newJson)=>{\r\n        if(IsValidJSONString(newJson))\r\n        {setJson(JSON.parse(newJson)); setJsonString(newJson)}\r\n        else\r\n        {\r\n            setJson(error);\r\n            setJsonString(newJson);\r\n        }\r\n    } \r\n    return (\r\n        <>\r\n        <header style={{width:\"100vw\",backgroundColor:\"black\",color:'white',textAlign:\"center\"}} >JSON Viewer</header>\r\n        <div id=\"jsonviewer\">\r\n        <div style={{width:\"70vw\",height:\"95vh\",overflowY:\"auto\"}}>\r\n            <ObjectViewer marginLeft={0} data={json} heading={\"JSON\"}/>\r\n        </div>\r\n        <div style={{width:\"30vw\",padding:\"5px\"}}><Editor value={jsonString} handleJsonChange={handleJsonChange}/></div>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default JsonViewer\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport JsonViewer from './JsonViewer'\n\nReactDOM.render(\n  <React.StrictMode>\n    <JsonViewer/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}